#!/bin/bash
# Name:     new_linux_setup
# Purpose:  Install essential libraries for a native and VM Ubuntu distro
#           to work properly with our development work.
# Copyright:    NEVS AB

declare -A apps=(["python3"]="" ["python3-pip"]="" ["synaptic"]="" ["redshift"]="" ["shellcheck"]="" ["bleachbit"]=""
    ["vim"]="" ["vim-gtk"]="" ["vim-gtk3"]="" ["gparted"]="" ["build-essential"]="" ["make"]="" ["perl"]=""
    ["bluez"]="" ["blueman"]="" ["curl"]="" ["terminator"]="" ["fonts-firacode"]="" ["guvcview"]="" ["wget"]=""
    ["gpg"]="" ["apt-transport-https"]="" ["git"]="" ["fonts-ubuntu"]="")

declare -A vscode_plugs=(["ms-azuretools.vscode-docker"]="" ["streetsidesoftware.code-spell-checker"]="" ["idleberg.hopscotch"]="" ["ms-python.python"]=""
    ["timonwong.shellcheck"]="" ["redhat.vscode-yaml"]="" ["shardulm94.trailing-spaces"]="")

declare -A yocto_libs=(["gawk"]="" ["wget"]="" ["git-core"]="" ["diffstat"]="" ["unzip"]="" ["texinfo"]="" ["gcc-multilib"]="" ["build-essential"]="" ["chrpath"]="" ["socat"]="" ["libsdl1.2-dev"]="" ["xterm"]="" ["make"]="" ["xsltproc"]="" ["docbook-utils"]="" ["fop"]="" ["dblatex"]="" ["xmlto"]="" ["autoconf"]="" ["automake"]="" ["libtool"]="" ["libglib2.0-dev"]="" ["python"]="" ["bsdmainutils"]="" ["screen"]="")

declare -A docker_libs=(["ca-certificates"]="" ["curl"]="" ["gnupg"]="" ["lsb-release"]="" ["docker-ce"]="" ["docker-ce-cli"]="" ["containerd.io"]="" ["docker-composer-plugin"]="")

declare -A python_pkgs=(["autopep8"]="" ["pylint"]="")
declare -A vims=(["vim_plugin"]="" ["vim_rc"]="")

install_apps() {

    apt update
    for app in "${!apps[@]}"; do
        if apt -y install -- "$app"; then
            apps[$app]="OK"
        else
            apps[$app]="FAIL"
        fi
    done
}

install_vscode() {

    if ! hash code 2>/dev/null; then
        wget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor >packages.microsoft.gpg
        install -D -o root -g root -m 644 packages.microsoft.gpg /etc/apt/keyrings/packages.microsoft.gpg
		chattr -i /etc/apt/sources.list
        echo "deb [arch=amd64,arm64,armhf signed-by=/etc/apt/keyrings/packages.microsoft.gpg] https://packages.microsoft.com/repos/code stable main" >/etc/apt/sources.list.d/vscode.list
        rm -f packages.microsoft.gpg
		chattr +i /etc/apt/sources.list
        apt update
        apt -y install code
    fi
}

install_vscode_plugs() {

    if hash code 2>/dev/null; then
        for plug in "${!vscode_plugs[@]}"; do
            if code --install-extension "$plug" --force --user-data-dir "$HOME"/.vscode 2>/dev/null; then
                vscode_plugs[$plug]="OK"
            else
                vscode_plugs[$plug]="FAIL"
            fi
        done
    fi
}

install_python_pkgs() {

    for pkg in "${!python_pkgs[@]}"; do
        if pip3 install "$pkg"; then
            python_pkgs[$pkg]="OK"
        else
            python_pkgs[$pkg]="FAIL"
        fi
    done
}

install_docker() {
	
	mkdir -p /etc/apt/keyrings
	if curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg; then
		echo  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
		chmod a+r /etc/apt/keyrings/docker.gpg
		apt update
		for app in "${!docker_libs[@]}"; do
			if apt -y install -- "$app"; then
				docker_libs[$app]="OK"
			else
				docker_libs[$app]="FAIL"
			fi
		done
	fi
}

install_theme() {

	if [[ ! -d "$HOME"/.themes ]]; then
		mkdir "$HOME"/.themes
	fi

	if curl -s https://raw.githubusercontent.com/PeyamMaroufi/setup_linux/main/148144-prelude-dfr-0.5.tar.tar -o "$HOME"/.themes/148144-prelude-dfr-0.5.tar.tar; then
		tar -xf "$HOME"/.themes/148144-prelude-dfr-0.5.tar.tar -C "$HOME"/.themes/ &> /dev/null || { echo "Error: Could not extract tar file."; exit 1; }
		rm "$HOME"/.themes/148144-prelude-dfr-0.5.tar.tar &> /dev/null
		echo "Prelude theme is installed."
	else
		echo "Could not install Prelude theme."
	fi
}

configure_conky() {

	if curl -s  http://drive.noobslab.com/data/conky/start-conky -o "$HOME"/.start_conky; then
		chmod +x "$HOME"/.start-conky
		echo "Conky start script is created and exceptionable."

	else
		echo "Could not create a executionable Conky start script."
	fi

	if curl -s  http://drive.noobslab.com/data/conky/Hardy/hardy-conky-gmo.zip -o "$HOME"/hardy-conky-gmo.zip; then
		unzip -q "$HOME"/hardy-conky-gmo.zip && rm "$HOME"/hardy-conky-gmo.zip
		echo "Downloaded the fonts and symbols for conky theme."
	else
		echo "Could not download the fonts and symbols for conky theme."
		return 1
	fi
	if curl -s https://raw.githubusercontent.com/PeyamMaroufi/setup_linux/main/conkyrc -o "$HOME"/.conkyrc; then
		echo "New conkyrc file is now available in home directory."
	else
		echo "Could not download conkyrc. Proceeding with the default one."
		return 1
	fi

}

install_vim_plugs() {

    vim_plug="https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim"
    vimrc_file="https://raw.githubusercontent.com/PeyamMaroufi/myvimrc/master/vimrc"
    if curl -sfLo "$HOME"/.vim/autoload/plug.vim --create-dirs "$vim_plug"; then
        vims["vim_plugin"]="OK"
        if curl -sfLo ~/.vimrc "$vimrc_file"; then
            vims["vim_rc"]="OK"
        else
            vims["vim_rc"]="FAIL"
        fi
    else
        vims["vim_plugin"]="FAIL"
    fi
}

install_libraries_yocto () {

	for lib in "${!yocto_libs[@]}"; do
		if apt -y install -- "$lib"; then
			yocto_libs[$lib]="OK"
		else
			yocto_libs[$lib]="FAIL"
		fi
	done

}

print_results() {

	green="32"
    bold="\e[1;${green}m"
    no_style="\033[0m"
    echo ""
    echo -e "${bold}Application install status:${no_style}"
    printf '%s\n' "${!apps[@]}" "${apps[@]}" | pr -2t
    echo -e "${bold}Vscode plugins install status:${no_style}"
    printf '%s\n' "${!vscode_plugs[@]}" "${vscode_plugs[@]}" | pr -2t
    echo -e "${bold}Python package install status:${no_style}"
    printf '%s\n' "${!python_pkgs[@]}" "${python_pkgs[@]}" | pr -2t
    echo -e "${bold}Vim install status:${no_style}"
    printf '%s\n' "${!vims[@]}" "${vims[@]}" | pr -2t
    echo -e "${bold}Yocto libraries install status:${no_style}"
    printf '%s\n' "${!yocto_libs[@]}" "${yocto_libs[@]}" | pr -2t
    echo -e "${bold}Docker libraries install status:${no_style}"
    printf '%s\n' "${!docker_libs[@]}" "${docker_libs[@]}" | pr -2t
}

case "$1" in
	a|--apps)
		if [[ "$EUID" = 0 ]]; then
			read -p "This script will install ${#apps[@]} applications. Press enter to continue."
			i=0
			for p in "${!apps[@]}"; do
				echo "$(( i++ ))) $p"
			done |xargs -L3 | column -t
			install_apps
			print_results
		else
			echo "You don't have enough permission to install applications"
		fi
		;;
	y|--yocto)
		if [[ "$EUID" = 0 ]]; then
			read -p "This script will install ${#yocto_libs[@]} applications. Press enter to continue."
			i=0
			for p in "${!yocto_libs[@]}"; do
				echo "$(( i++ ))) $p"
			done |xargs -L3 | column -t
			install_libraries_yocto
			print_results
		else
			echo "You don't have enough permission to install Yocto's required libraries."
		fi
		;;
	d|--docker)
		if [[ "$EUID" = 0 ]]; then
			install_docker
			print_results
		else
			echo "You don't have enough permission to install docker."
		fi
		;;	
	s|--vscode)
		if [[ "$EUID" = 0 ]]; then
			install_vscode
			print_results
		else
			echo "You don't have enough permission to install vscode."
		fi
		;;
	p|--plugins)
		install_vscode_plugs
		install_python_pkgs
		install_vim_plugs
		print_results
		;;
	t|--theme)
		install_theme
		;;
	c|--conky)
		configure_conky
		print_results
		;;
	*)
		echo -e "Script usage: \n\t[a] or [--apps] To install needed applications.\n\t[y] or [--yocto] To install application needed by Yocto.\n\t[p] or [--plugins] To install Visual Code and Vim plugins.\n\t[d] or [--vscode] To install Visual Code.\n\t[t] or [--theme] To install Prelude theme on XFCE4.\n\t[c] or [--conky] To install and configure Conky." >&2
		exit 1
		;;
esac
